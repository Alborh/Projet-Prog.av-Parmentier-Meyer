#include "moteur.h"
#include <stdlib.h>
#include <stdio.h>
#include <SDL/SDL.h>
#include <string.h>
#include <math.h>
//#include <SDL_ttf/SDL_ttf.h>

void choix_perso(SDL_Surface* ecran)
{
    SDL_Surface *menuChoix = NULL, *Curseur = NULL;
    SDL_Rect positionMenu, positionCurseur;
    SDL_Event event;

    int continuer = 1;

    menuChoix = SDL_LoadBMP("image/");  //charger l'image du menu de selection du personnage
    Curseur = SDL_LoadBMP("image/");    //charger l'image du curseur de selection


    positionMenu.x = 0;
    positionMenu.y = 0;
    positionCurseur.x = 0; //coordonées à modifier en fonction du menu
    positionCurseur.y = 0;


    while(continuer)
    {
        SDL_WaitEvent(&event);
        switch(event.type)
        {
        case SDL_QUIT:
            continuer = 0;
            break;
        case SDL_KEYDOWN:
            switch(event.key.keysym.sym)
            {
            case SDLK_ESCAPE:
                continuer = 0;
                break;
            case SDLK_RIGHT:
                //deplacerCurseurChoix(&positionCurseur,DROITE);
                break;
            case SDLK_LEFT:
                //deplacerCurseurChpix(&positionCurseur,GAUCHE);
                break;
            case SDLK_RETURN:
                break;
            }
            break;
        }

        SDL_BlitSurface(menuChoix, NULL, ecran, &positionMenu);
        SDL_BlitSurface(Curseur, NULL, ecran, &positionCurseur);
        SDL_Flip(ecran);
    }


    SDL_FreeSurface(menuChoix);
    SDL_FreeSurface(Curseur);
}


void deplacerCurseurChoix(SDL_Rect *pos,int direction)
{
    switch (direction)
    {
    case DROITE:
        break;
    case GAUCHE:
        break;
    }
}

int chargerNiveau(Tile niveau[][NB_BLOCKS_HAUTEUR], char level[50])
{
  char nom[50] = "niveau/";
    strcat(nom, level);
    strcat(nom,".txt");

    FILE *fichier = NULL;
    fichier = fopen(nom,"r");

    rewind(fichier);

    int i=0, j=0;


    for(i = 0; i < NB_BLOCKS_HAUTEUR; i++)
    {
        for(j = 0; j < NB_BLOCKS_LARGEUR; j++)
        {
            niveau[j][i].sprite = fgetc(fichier);
            switch(niveau[j][i].sprite)
            {
            case MUR:
                niveau[j][i].marchable = _MUR;
                break;
            case DALLE:
                niveau[j][i].marchable = _DALLE;
                break;
            case HERBE:
                niveau[j][i].marchable = _HERBE;
                break;
            case ARBRE:
                niveau[j][i].marchable = _ARBRE;
                break;
            case COFFRE:
                niveau[j][i].marchable = _COFFRE;
                break;
            case EAU:
                niveau[j][i].marchable = _EAU;
                break;
            case PONT_H:
                niveau[j][i].marchable = _PONT_H;
                break;
            case PONT_V:
                niveau[j][i].marchable = _PONT_V;
                break;
            case BORD:
                niveau[j][i].marchable = _BORD;
                break;
            case ROUTE:
                niveau[j][i].marchable = _ROUTE;
                break;
            case SPAWN:
                niveau[j][i].marchable = _SPAWN;
                break;
	    case PORTE:
	      niveau[j][i].marchable = _PORTE;
	      break;
	    case VIDE:
	      niveau[j][i].marchable = _VIDE;
	      break;
	    case MONT:
	      niveau[j][i].marchable = _MONT;
	      break;
	    case GOLEM:
	      niveau[j][i].marchable = _GOLEM;
	      break;
            }

        }
        fseek(fichier,2,SEEK_CUR);
    }
    fclose(fichier);
    return 1;
}

void jeu(SDL_Surface* ecran)
{
    SDL_Surface *Joueur[4] = {NULL};
    SDL_Surface *JoueurActuel = NULL;
    SDL_Surface *Terrain [NB_SPRITES]= {NULL};
    SDL_Rect position, positionJoueur, positionFond;
    SDL_Event event;
    SDL_Surface* tmp;
    ennemi_t gobelin[5];
    SDL_Surface *sprite_gob;
    int nb_gob = NB_GOB_D;
    int continuer = 1, i = 0, j = 0;
    Tile carte[NB_BLOCKS_LARGEUR][NB_BLOCKS_HAUTEUR]={0}; //tableau de données de la carte du niveau
    character_t player;
    player.pv_max = PV_BASE;
    player.pv_act = player.pv_max;
    player.ac = AC_BASE;
    player.ac_boost = player.ac;
    player.att = ATT_BASE;
    player.dmg = DMG_BASE;
    player.nb_d = NB_D_BASE;
    player.nb_f = NB_F_BASE;
    /* TTF_Font *font = TTF_OpenFont("image/04B_30__.TTF",32);
    char affichage_pv[25] = "Affichage des pv";
    SDL_Color color = {255, 255, 255};
    SDL_Surface *textsurface = TTF_RenderUTF8_Solid(font, affichage_pv, color);
    sprintf(affichage_pv, "Points de vie : %d", player.pv);
    SDL_BlitSurface(textsurface, NULL, ecran, NULL);
    SDL_FreeSurface(textsurface);*/
    // chargement des sprites des différents terrains 
    Terrain[MUR]=SDL_LoadBMP("image/Mur.dib.bmp"); //sprite du mur
    Terrain[DALLE]=SDL_LoadBMP("image/Dalle.dib.bmp");
    Terrain[HERBE]=SDL_LoadBMP("image/grass.dib.bmp");
    Terrain[ARBRE]=SDL_LoadBMP("image/Arbre.dib.bmp");
    Terrain[COFFRE]=SDL_LoadBMP("image/Coffre.dib.bmp");
    Terrain[EAU]=SDL_LoadBMP("image/eau.dib.bmp");
    Terrain[PONT_H]=SDL_LoadBMP("image/Bridge_H.dib.bmp");
    Terrain[PONT_V]=SDL_LoadBMP("image/Bridge_V.dib.bmp");
    Terrain[BORD]=SDL_LoadBMP("image/Vide.dib.bmp");
    Terrain[ROUTE]=SDL_LoadBMP("image/road.bmp");
    Terrain[SPAWN]=SDL_LoadBMP("image/Spawn.bmp");
    Terrain[PORTE]=SDL_LoadBMP("image/Porte.bmp");
    Terrain[VIDE]=SDL_LoadBMP("image/Vide.dib.bmp");
    Terrain[MONT]=SDL_LoadBMP("image/Montagne.bmp");
    Terrain[GOLEM]=SDL_LoadBMP("image/golem.bmp");
    //chargement des sprites des différentes position du joueur
    tmp = SDL_LoadBMP("image/Hero_h.bmp");
    Joueur[HAUT] = SDL_DisplayFormat(tmp);
    tmp = SDL_LoadBMP("image/Hero.bmp");
    Joueur[BAS] = SDL_DisplayFormat(tmp);
    tmp = SDL_LoadBMP("image/Hero_g.bmp");
    Joueur[GAUCHE] = SDL_DisplayFormat(tmp);
    tmp = SDL_LoadBMP("image/Hero.bmp");
    Joueur[DROITE] = SDL_DisplayFormat(tmp);
    tmp = SDL_LoadBMP("image/Gobelin.bmp");
    sprite_gob = SDL_DisplayFormat(tmp);
    int colorkey;
    colorkey = SDL_MapRGB(ecran->format, 255, 0, 255);
    SDL_SetColorKey(Joueur[HAUT], SDL_RLEACCEL | SDL_SRCCOLORKEY, colorkey);
    SDL_SetColorKey(Joueur[BAS], SDL_RLEACCEL | SDL_SRCCOLORKEY, colorkey);
    SDL_SetColorKey(Joueur[GAUCHE], SDL_RLEACCEL | SDL_SRCCOLORKEY, colorkey);
    SDL_SetColorKey(Joueur[DROITE], SDL_RLEACCEL | SDL_SRCCOLORKEY, colorkey);
    JoueurActuel = Joueur[HAUT];
    SDL_SetColorKey(sprite_gob, SDL_RLEACCEL | SDL_SRCCOLORKEY, colorkey);




    // preset du joueur dans la position initial
    JoueurActuel = Joueur[GAUCHE];

    //configuration de la position initial des sprites de map
    positionFond.x = 0;
    positionFond.y = 0;

    rechercheSpawn(&positionJoueur, carte);

    if(!chargerNiveau(carte, "Terrain"))
        exit(EXIT_FAILURE);

    rechercheSpawn(&positionJoueur, carte);
    create_gob(gobelin, carte, sprite_gob, NB_GOB_D);
    int u;
    SDL_EnableKeyRepeat(100,100);
    while(continuer)
    {
    SDL_BlitSurface(JoueurActuel, NULL, ecran, &position);
    SDL_Flip(ecran);
        SDL_WaitEvent(&event);
        switch(event.type)
        {
        case SDL_QUIT:
            continuer = 0;
            break;
        case SDL_KEYDOWN:
            switch(event.key.keysym.sym)
            {
	    case SDLK_ESCAPE:
	      continuer = 0;
	      break;
            case SDLK_UP:
                JoueurActuel = Joueur[HAUT];
                deplacerJoueur(&positionJoueur, HAUT, carte);
                break;
            case SDLK_DOWN:
                JoueurActuel = Joueur[BAS];
                deplacerJoueur(&positionJoueur,BAS,carte);
                break;
            case SDLK_RIGHT:
                JoueurActuel = Joueur[DROITE];
                deplacerJoueur(&positionJoueur,DROITE,carte);
                break;
            case SDLK_LEFT:
                JoueurActuel = Joueur[GAUCHE];
                deplacerJoueur(&positionJoueur,GAUCHE,carte);
                break;
	    case SDLK_RETURN:
	      i = positionJoueur.y % NB_PIXELS;
	      j = positionJoueur.x % NB_PIXELS;
	      if(carte[j][i].sprite==PORTE)
		{
		  Interieur(ecran, Joueur, JoueurActuel, Terrain, gobelin, sprite_gob, player);
		}
	      break;
	    case SDLK_SPACE:
	      printf("nb_gob = %d\n",nb_gob);
	      nb_gob = kill_tab_param(gobelin, nb_gob, positionJoueur);
	      printf("nb_gob = %d\n",nb_gob);
	      break;
	    default:
	      break;
            }
            break;
        }
        SDL_FillRect(ecran,NULL,SDL_MapRGB(ecran->format,255,255,255));

        for(i = 0; i < NB_BLOCKS_HAUTEUR; i++)
        {
            for(j =0; j < NB_BLOCKS_LARGEUR; j++)
            {
                positionFond.x = j*NB_PIXELS;
                positionFond.y = i*NB_PIXELS;
                SDL_BlitSurface(Terrain[carte[j][i].sprite],NULL, ecran, &positionFond);
            }
        }
        position.x = positionJoueur.x*NB_PIXELS;
        position.y = positionJoueur.y*NB_PIXELS;
        SDL_BlitSurface(JoueurActuel, NULL, ecran, &position);
	int i;
	for(i=0; i<nb_gob; i++)
	  {
	    SDL_BlitSurface(gobelin[i].sprite_picture, NULL, ecran, &gobelin[i].position);
	  }


        SDL_Flip(ecran);
    }


    SDL_EnableKeyRepeat(0,0);

    for( i = 0; i < 4; i++)
        SDL_FreeSurface(Joueur[i]);

    for( i = 0; i< NB_SPRITES; i++)
        SDL_FreeSurface(Terrain[i]);
    // TTF_CloseFont(font);
    SDL_FreeSurface(JoueurActuel);
    SDL_FreeSurface(sprite_gob);

}

void deplacerJoueur(SDL_Rect *pos, int direction,Tile carte[][NB_BLOCKS_HAUTEUR])
{
    switch (direction)
    {
    case HAUT:
        if(carte[pos->x][pos->y-1].marchable == 0)
        {
            break;
        }
        else
        {
            pos->y--;
            break;
        }
    case BAS:
        if(carte[pos->x][pos->y+1].marchable == 0)
        {
            break;
        }
        else
        {
            pos->y++;
            break;
        }
    case DROITE:
        if(carte[pos->x+1][pos->y].marchable == 0)
        {
            break;
        }
        else
        {
            pos->x++;
            break;
        }
    case GAUCHE:
        if(carte[pos->x-1][pos->y].marchable == 0)
        {
            break;
        }
        else
        {
            pos->x--;
            break;
        }
    }
}

void rechercheSpawn(SDL_Rect *pos,Tile carte[][NB_BLOCKS_HAUTEUR])
{
    int i,j;
    for(i = 0; i < NB_BLOCKS_HAUTEUR; i++)
        {
            for(j =0; j < NB_BLOCKS_LARGEUR; j++)
            {
                if(carte[j][i].sprite == 'S')
                {
                    pos->x = j;
                    pos->y = i;
                }
            }
        }
}

void menu(SDL_Surface* ecran)
{
    SDL_Surface* menuJeu = NULL, *Curseur = NULL;
    SDL_Rect positionMenu, positionCurseur;
    SDL_Event event;

    int continuer =1;

    menuJeu = SDL_LoadBMP("image/Menu.bmp"); // charger l'image du menu du jeu
    Curseur = SDL_LoadBMP("image/Hand.bmp");      // charger l'image du curseur de selection
    SDL_SetColorKey(Curseur, SDL_SRCCOLORKEY, SDL_MapRGB(Curseur->format,0,255,0));
    //mise en transparence du fond vert du curseur

    positionMenu.x = 0;
    positionMenu.y = 0;
    positionCurseur.x = 300; // coordonnées à modifier en fonction de la configuration du menu
    positionCurseur.y = 450;



    while (continuer)
    {
        SDL_WaitEvent(&event);
        switch(event.type)
        {
        case SDL_QUIT:
            continuer = 0;
            break;
        case SDL_KEYDOWN:
            switch(event.key.keysym.sym)
            {
	    case SDLK_ESCAPE:
	      continuer = 0;
	      break;
            case SDLK_UP:
                deplacerCurseurMenu(&positionCurseur,HAUT);
                break;
            case SDLK_DOWN:
                deplacerCurseurMenu(&positionCurseur,BAS);
                break;
            case SDLK_RETURN:
                if(positionCurseur.y == 450)
                {
                    jeu(ecran);
                    break;
                }
                if(positionCurseur.y == 500)
                {
                    continuer = 0;
                    break;
                }
            }
            break;
        }
        SDL_BlitSurface(menuJeu, NULL, ecran, &positionMenu);
        SDL_BlitSurface(Curseur, NULL, ecran, &positionCurseur);
        SDL_Flip(ecran);

    }

    SDL_FreeSurface(menuJeu);
    SDL_FreeSurface(Curseur);

}

void deplacerCurseurMenu(SDL_Rect* pos, int direction)
{
    switch(direction) //coordonées à modifier en fonction de la configuration du menu
    {
    case HAUT:
        if(pos->y == 450) //le curseur est en haut du menu
        {
            pos->y = 500; //on descend le curseur en bas du menu
            break;
        }
        else
        {
            pos->y = 450;
            break;
        }
    case BAS:
        if(pos->y == 500) //le curseur est en bas du menu
        {
            pos->y = 450; //on remonte le curseur en haut du menu
            break;
        }
        else
        {
            pos->y = 500;
            break;
        }
    }
}

void Interieur(SDL_Surface *ecran, SDL_Surface *Joueur[],SDL_Surface *JoueurActuel, SDL_Surface *Terrain[], ennemi_t gobelin[], SDL_Surface *sprite_gob, character_t player)
{
    int continuer = 1;
    SDL_Rect position, positionJoueur, positionFond;
    SDL_Event event;
    int nb_gob = NB_GOB_I;
    int i=0, j=0;

    Tile carte[NB_BLOCKS_LARGEUR][NB_BLOCKS_HAUTEUR]={0};

    if(!chargerNiveau(carte, "Interieur"))
        exit(EXIT_FAILURE);


    recherchePorte(&positionJoueur, carte);
    create_gob(gobelin, carte, sprite_gob, NB_GOB_I);
    while(continuer)
    {
        SDL_WaitEvent(&event);
        switch(event.type)
        {
        case SDL_QUIT:
            continuer = 0;
            break;
        case SDL_KEYDOWN:
            switch(event.key.keysym.sym)
            {
            case SDLK_UP:
                JoueurActuel = Joueur[HAUT];
                deplacerJoueur(&positionJoueur, HAUT, carte);
                break;
            case SDLK_DOWN:
                JoueurActuel = Joueur[BAS];
                deplacerJoueur(&positionJoueur,BAS,carte);
                break;
            case SDLK_RIGHT:
                JoueurActuel = Joueur[DROITE];
                deplacerJoueur(&positionJoueur,DROITE,carte);
                break;
            case SDLK_LEFT:
                JoueurActuel = Joueur[GAUCHE];
                deplacerJoueur(&positionJoueur,GAUCHE,carte);
                break;
            case SDLK_ESCAPE:

                continuer = 0;
                break;
            case SDLK_RETURN:
                i = positionJoueur.y % NB_PIXELS;
                j = positionJoueur.x % NB_PIXELS;
                if(carte[j][i].sprite == PORTE)
                {
                    continuer = 0;
                }
                break;
	    case SDLK_SPACE:
	      printf("bloup");
	      /*for(u=0; u<nb_gob; u++)
		{
		  printf("%d", test_collide(gobelin[u],positionJoueur));
		  if(test_collide(gobelin[u],positionJoueur)==1)
		  {*/
		      nb_gob -= 1;
		      //}
		      //}
	      break;
            }
            break;
        }
        SDL_FillRect(ecran,NULL,SDL_MapRGB(ecran->format,255,255,255));

        for(i = 0; i < NB_BLOCKS_HAUTEUR; i++)
        {
            for(j =0; j < NB_BLOCKS_LARGEUR; j++)
            {
                positionFond.x = j*NB_PIXELS;
                positionFond.y = i*NB_PIXELS;
                SDL_BlitSurface(Terrain[carte[j][i].sprite],NULL, ecran, &positionFond);
            }
        }
        position.x = positionJoueur.x*NB_PIXELS;
        position.y = positionJoueur.y*NB_PIXELS;
	int i;
	for(i=0; i<nb_gob; i++)
	  {
	    SDL_BlitSurface(gobelin[i].sprite_picture, NULL, ecran, &gobelin[i].position);
	  }
	SDL_BlitSurface(JoueurActuel, NULL, ecran, &position);

        SDL_Flip(ecran);
    }


}

void recherchePorte(SDL_Rect *pos, Tile carte[][NB_BLOCKS_HAUTEUR])
{
    int i,j;
    for(i = 0; i < NB_BLOCKS_HAUTEUR; i++)
        {
            for(j =0; j < NB_BLOCKS_LARGEUR; j++)
            {
                if(carte[j][i].sprite == 'P')
                {
                    pos->x = j;
                    pos->y = i;
                }
            }
        }
}

int jetDe(int nb, int fa)
{
  int res = 0;
  int i;
  for(i=0; i<nb; i++)
    {
      res = res + rand()%fa +1;
    }
  return res;
}

void create_gob(ennemi_t gob[], Tile carte[][NB_BLOCKS_HAUTEUR], SDL_Surface* sprite_gob, int nb)
{
  int i;
  int col, lig;
  for (i=0; i<nb; i++)
    {
      col = rand()%NB_BLOCKS_LARGEUR;
      lig = rand()%NB_BLOCKS_HAUTEUR;
      while(carte[col][lig].marchable == 0 || carte[col][lig].sprite==PORTE || carte[col][lig].sprite==COFFRE )
	{
	  col = rand()%NB_BLOCKS_LARGEUR;
	  lig = rand()%NB_BLOCKS_HAUTEUR;
	}
      gob[i].col = col;
      gob[i].lig = lig;
      gob[i].position.x = col*NB_PIXELS;
      gob[i].position.y = lig*NB_PIXELS;
      gob[i].sprite_picture = sprite_gob;
      gob[i].type = TYPE_GOB;
    }
}

int test_collide(ennemi_t enn, SDL_Rect positionJoueur)
{
  if(enn.position.x/32==positionJoueur.x && enn.position.y/32==positionJoueur.y)
    {
      // printf("pouet");
      return 1;
    }
  else
    {  
      //printf("prout");
      return 0;
    }
}

void kill_tab(ennemi_t enn[], int num, int nombre)
{
  ennemi_t temp = enn[num];
  enn[num] = enn[nombre];
  enn[nombre] = temp;
}

int kill_tab_param(ennemi_t enn[], int nombre, SDL_Rect positionJoueur)
{
  int i;
  for(i=0; i<nombre; i++)
    {
      if(test_collide(enn[i],positionJoueur)==1)
	{
	  kill_tab(enn, i, nombre);
	  nombre --;
	}
    }
  return nombre;
}
